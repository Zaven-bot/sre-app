apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  annotations:
    # Choose ingress controller - examples for different providers:
    # For AWS ALB:
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    
    # For nginx-ingress:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    
    # For cert-manager (automatic HTTPS):
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    
    # Rate limiting:
    nginx.ingress.kubernetes.io/rate-limit: "100"
    
  labels:
    app: sre-learning-app
spec:
  ingressClassName: nginx  # Use nginx ingress controller
  # TLS configuration (uncomment when you have certificates)
  # tls:
  # - hosts:
  #   - your-domain.com
  #   secretName: app-tls-secret
  
  rules:
  # Default rule for local testing (no host specified)
  - http:
      paths:
      # Frontend routes
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      
      # Backend API routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 5000
      
      # Health check endpoints
      - path: /health
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 5000
      
      # Metrics endpoint (consider restricting access in production)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 5000
      
      # Prometheus UI
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
      
      # Grafana UI
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
  
  # Production rule with actual domain (uncomment and modify for production)
  # - host: your-domain.com
  #   http:
  #     paths:
  #     - path: /
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: frontend-service
  #           port:
  #             number: 80
  #     - path: /api
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: backend-service
  #           port:
  #             number: 5000

---
# Alternative: LoadBalancer service for simple cloud deployment
apiVersion: v1
kind: Service
metadata:
  name: frontend-loadbalancer
  labels:
    app: frontend
    tier: frontend
spec:
  type: NodePort  # Creates cloud provider load balancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: frontend
  # Cloud provider specific annotations:
  # AWS:
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-type: nlb
  #   service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
  
  # GCP:
  # annotations:
  #   cloud.google.com/load-balancer-type: External
