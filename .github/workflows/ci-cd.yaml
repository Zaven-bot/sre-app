name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Linting and code quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint
        pip install -r app/backend/requirements.txt

    - name: Lint Python code with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app/backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check Python code formatting with black
      run: |
        black --check app/backend

    - name: Lint with pylint
      run: |
        pylint app/backend --exit-zero

    - name: Check HTML/CSS/JS (basic)
      run: |
        # Basic HTML validation - in real project, use proper HTML linter
        echo "üîç Checking frontend files..."
        ls -la app/frontend/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r app/backend/requirements.txt

    - name: Run backend tests
      run: |
        cd app/backend
        python -m pytest --cov=. --cov-report=xml --cov-report=html
      continue-on-error: true  # Don't fail build on test failures during development

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./app/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Frontend image
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Backend image
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Scan images for vulnerabilities
    - name: Scan frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        format: 'sarif'
        output: 'trivy-frontend.sarif'

    - name: Scan backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        format: 'sarif'
        output: 'trivy-backend.sarif'

  # Integration tests with Docker Compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test environment
      run: |
        # Create a test version of docker-compose
        cp docker/docker-compose.yml docker-compose.test.yml
        
    - name: Run integration tests
      run: |
        cd docker
        # Start the application
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run basic health checks
        curl -f http://localhost:5000/health || exit 1
        curl -f http://localhost/health || exit 1
        curl -f http://localhost:9090/-/healthy || exit 1
        
        # Run more comprehensive tests
        echo "üß™ Running API tests..."
        curl -f http://localhost:5000/metrics
        curl -f http://localhost:5000/api/data
        
        echo "‚úÖ Integration tests passed!"
        
    - name: Cleanup test environment
      if: always()
      run: |
        cd docker
        docker-compose -f docker-compose.test.yml down -v

  # # Deploy to staging (on main branch)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [build, integration-test]
  #   if: github.ref == 'refs/heads/main'
  #   environment: staging
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-west-2

  #   - name: Configure kubectl
  #     run: |
  #       aws eks update-kubeconfig --region us-west-2 --name sre-learning-cluster

  #   - name: Deploy to staging
  #     run: |
  #       # Update image tags in K8s manifests
  #       sed -i 's|image: sre-learning-app/frontend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|' k8s/deployment-frontend.yaml
  #       sed -i 's|image: sre-learning-app/backend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|' k8s/deployment-backend.yaml
        
  #       # Apply K8s manifests
  #       kubectl apply -f k8s/
        
  #       # Wait for rollout to complete
  #       kubectl rollout status deployment/frontend-deployment -n default --timeout=300s
  #       kubectl rollout status deployment/backend-deployment -n default --timeout=300s
        
  #       echo "üöÄ Staging deployment completed!"

  #   - name: Run smoke tests against staging
  #     run: |
  #       # Get the staging URL (adjust based on your ingress configuration)
  #       STAGING_URL=$(kubectl get ingress app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
  #       # Run smoke tests
  #       curl -f http://$STAGING_URL/health
  #       curl -f http://$STAGING_URL/api/data
        
  #       echo "‚úÖ Staging smoke tests passed!"

  # # Deploy to production (manual approval required)
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging]
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-west-2

  #   - name: Configure kubectl
  #     run: |
  #       aws eks update-kubeconfig --region us-west-2 --name sre-learning-cluster

  #   - name: Deploy to production
  #     run: |
  #       # Use blue-green deployment strategy for production
  #       # This is a simplified version - consider using tools like Argo Rollouts
        
  #       # Update image tags
  #       sed -i 's|image: sre-learning-app/frontend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|' k8s/deployment-frontend.yaml
  #       sed -i 's|image: sre-learning-app/backend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|' k8s/deployment-backend.yaml
        
  #       # Apply with rolling update
  #       kubectl apply -f k8s/
        
  #       # Monitor rollout
  #       kubectl rollout status deployment/frontend-deployment -n default --timeout=600s
  #       kubectl rollout status deployment/backend-deployment -n default --timeout=600s
        
  #       echo "üéâ Production deployment completed!"

  #   - name: Post-deployment verification
  #     run: |
  #       # Run comprehensive post-deployment tests
  #       PROD_URL=$(kubectl get ingress app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
  #       # Health checks
  #       curl -f http://$PROD_URL/health
  #       curl -f http://$PROD_URL/metrics
        
  #       # Performance check
  #       curl -w "Total time: %{time_total}s\n" -o /dev/null -s http://$PROD_URL/api/data
        
  #       echo "‚úÖ Production verification completed!"

  #   - name: Notify deployment
  #     uses: 8398a7/action-slack@v3
  #     if: always()
  #     with:
  #       status: ${{ job.status }}
  #       text: "Production deployment ${{ job.status }} for commit ${{ github.sha }}"
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# TODO: Add the following jobs for a complete pipeline:
# - Canary deployments
# - Database migrations
# - Performance testing
# - Load testing
# - Accessibility testing
# - E2E testing with Playwright/Cypress
